import lodash from 'lodash';
import { derived, type Readable } from 'svelte/store';
import type { Page, ParamMatcher } from '@sveltejs/kit';

const { get } = lodash;

const availableLocales = {
	modern: [
		'af',
		'af-NA',
		'am',
		'ar',
		'ar-AE',
		'ar-BH',
		'ar-DJ',
		'ar-DZ',
		'ar-EG',
		'ar-EH',
		'ar-ER',
		'ar-IL',
		'ar-IQ',
		'ar-JO',
		'ar-KM',
		'ar-KW',
		'ar-LB',
		'ar-LY',
		'ar-MA',
		'ar-MR',
		'ar-OM',
		'ar-PS',
		'ar-QA',
		'ar-SA',
		'ar-SD',
		'ar-SO',
		'ar-SS',
		'ar-SY',
		'ar-TD',
		'ar-TN',
		'ar-YE',
		'as',
		'az',
		'az-Latn',
		'be',
		'be-tarask',
		'bg',
		'bn',
		'bn-IN',
		'bs',
		'bs-Latn',
		'ca',
		'ca-AD',
		'ca-ES-valencia',
		'ca-FR',
		'ca-IT',
		'chr',
		'cs',
		'cy',
		'da',
		'da-GL',
		'de',
		'de-AT',
		'de-BE',
		'de-CH',
		'de-IT',
		'de-LI',
		'de-LU',
		'dsb',
		'el',
		'el-CY',
		'en',
		'en-001',
		'en-150',
		'en-AE',
		'en-AG',
		'en-AI',
		'en-AS',
		'en-AT',
		'en-AU',
		'en-BB',
		'en-BE',
		'en-BI',
		'en-BM',
		'en-BS',
		'en-BW',
		'en-BZ',
		'en-CA',
		'en-CC',
		'en-CH',
		'en-CK',
		'en-CM',
		'en-CX',
		'en-CY',
		'en-DE',
		'en-DG',
		'en-DK',
		'en-DM',
		'en-ER',
		'en-FI',
		'en-FJ',
		'en-FK',
		'en-FM',
		'en-GB',
		'en-GD',
		'en-GG',
		'en-GH',
		'en-GI',
		'en-GM',
		'en-GU',
		'en-GY',
		'en-HK',
		'en-IE',
		'en-IL',
		'en-IM',
		'en-IN',
		'en-IO',
		'en-JE',
		'en-JM',
		'en-KE',
		'en-KI',
		'en-KN',
		'en-KY',
		'en-LC',
		'en-LR',
		'en-LS',
		'en-MG',
		'en-MH',
		'en-MO',
		'en-MP',
		'en-MS',
		'en-MT',
		'en-MU',
		'en-MV',
		'en-MW',
		'en-MY',
		'en-NA',
		'en-NF',
		'en-NG',
		'en-NL',
		'en-NR',
		'en-NU',
		'en-NZ',
		'en-PG',
		'en-PH',
		'en-PK',
		'en-PN',
		'en-PR',
		'en-PW',
		'en-RW',
		'en-SB',
		'en-SC',
		'en-SD',
		'en-SE',
		'en-SG',
		'en-SH',
		'en-SI',
		'en-SL',
		'en-SS',
		'en-SX',
		'en-SZ',
		'en-TC',
		'en-TK',
		'en-TO',
		'en-TT',
		'en-TV',
		'en-TZ',
		'en-UG',
		'en-UM',
		'en-VC',
		'en-VG',
		'en-VI',
		'en-VU',
		'en-WS',
		'en-ZA',
		'en-ZM',
		'en-ZW',
		'es',
		'es-419',
		'es-AR',
		'es-BO',
		'es-BR',
		'es-BZ',
		'es-CL',
		'es-CO',
		'es-CR',
		'es-CU',
		'es-DO',
		'es-EA',
		'es-EC',
		'es-GQ',
		'es-GT',
		'es-HN',
		'es-IC',
		'es-MX',
		'es-NI',
		'es-PA',
		'es-PE',
		'es-PH',
		'es-PR',
		'es-PY',
		'es-SV',
		'es-US',
		'es-UY',
		'es-VE',
		'et',
		'eu',
		'fa',
		'fa-AF',
		'fi',
		'fil',
		'fr',
		'fr-BE',
		'fr-BF',
		'fr-BI',
		'fr-BJ',
		'fr-BL',
		'fr-CA',
		'fr-CD',
		'fr-CF',
		'fr-CG',
		'fr-CH',
		'fr-CI',
		'fr-CM',
		'fr-DJ',
		'fr-DZ',
		'fr-GA',
		'fr-GF',
		'fr-GN',
		'fr-GP',
		'fr-GQ',
		'fr-HT',
		'fr-KM',
		'fr-LU',
		'fr-MA',
		'fr-MC',
		'fr-MF',
		'fr-MG',
		'fr-ML',
		'fr-MQ',
		'fr-MR',
		'fr-MU',
		'fr-NC',
		'fr-NE',
		'fr-PF',
		'fr-PM',
		'fr-RE',
		'fr-RW',
		'fr-SC',
		'fr-SN',
		'fr-SY',
		'fr-TD',
		'fr-TG',
		'fr-TN',
		'fr-VU',
		'fr-WF',
		'fr-YT',
		'ga',
		'ga-GB',
		'gd',
		'gl',
		'gu',
		'ha',
		'ha-GH',
		'ha-NE',
		'he',
		'hi',
		'hi-Latn',
		'hr',
		'hr-BA',
		'hsb',
		'hu',
		'hy',
		'id',
		'ig',
		'is',
		'it',
		'it-CH',
		'it-SM',
		'it-VA',
		'ja',
		'jv',
		'ka',
		'kk',
		'km',
		'kn',
		'ko',
		'ko-KP',
		'kok',
		'ky',
		'lo',
		'lt',
		'lv',
		'mk',
		'ml',
		'mn',
		'mr',
		'ms',
		'ms-BN',
		'ms-ID',
		'ms-SG',
		'my',
		'nb',
		'nb-SJ',
		'ne',
		'ne-IN',
		'nl',
		'nl-AW',
		'nl-BE',
		'nl-BQ',
		'nl-CW',
		'nl-SR',
		'nl-SX',
		'nn',
		'no',
		'or',
		'pa',
		'pa-Guru',
		'pcm',
		'pl',
		'ps',
		'ps-PK',
		'pt',
		'pt-AO',
		'pt-CH',
		'pt-CV',
		'pt-GQ',
		'pt-GW',
		'pt-LU',
		'pt-MO',
		'pt-MZ',
		'pt-PT',
		'pt-ST',
		'pt-TL',
		'qu',
		'qu-BO',
		'qu-EC',
		'ro',
		'ro-MD',
		'ru',
		'ru-BY',
		'ru-KG',
		'ru-KZ',
		'ru-MD',
		'ru-UA',
		'sd',
		'sd-Arab',
		'si',
		'sk',
		'sl',
		'so',
		'so-DJ',
		'so-ET',
		'so-KE',
		'sq',
		'sq-MK',
		'sq-XK',
		'sr',
		'sr-Cyrl',
		'sr-Cyrl-BA',
		'sr-Cyrl-ME',
		'sr-Cyrl-XK',
		'sr-Latn',
		'sr-Latn-BA',
		'sr-Latn-ME',
		'sr-Latn-XK',
		'sv',
		'sv-AX',
		'sv-FI',
		'sw',
		'sw-CD',
		'sw-KE',
		'sw-UG',
		'ta',
		'ta-LK',
		'ta-MY',
		'ta-SG',
		'te',
		'th',
		'tk',
		'to',
		'tr',
		'tr-CY',
		'uk',
		'und',
		'ur',
		'ur-IN',
		'uz',
		'uz-Latn',
		'vi',
		'yo',
		'yo-BJ',
		'yue',
		'yue-Hans',
		'yue-Hant',
		'zh',
		'zh-Hans',
		'zh-Hans-HK',
		'zh-Hans-MO',
		'zh-Hans-SG',
		'zh-Hant',
		'zh-Hant-HK',
		'zh-Hant-MO',
		'zu'
	],
	full: [
		'af',
		'af-NA',
		'agq',
		'ak',
		'am',
		'ann',
		'ar',
		'ar-AE',
		'ar-BH',
		'ar-DJ',
		'ar-DZ',
		'ar-EG',
		'ar-EH',
		'ar-ER',
		'ar-IL',
		'ar-IQ',
		'ar-JO',
		'ar-KM',
		'ar-KW',
		'ar-LB',
		'ar-LY',
		'ar-MA',
		'ar-MR',
		'ar-OM',
		'ar-PS',
		'ar-QA',
		'ar-SA',
		'ar-SD',
		'ar-SO',
		'ar-SS',
		'ar-SY',
		'ar-TD',
		'ar-TN',
		'ar-YE',
		'as',
		'asa',
		'ast',
		'az',
		'az-Cyrl',
		'az-Latn',
		'bas',
		'be',
		'be-tarask',
		'bem',
		'bez',
		'bg',
		'bgc',
		'bho',
		'bm',
		'bn',
		'bn-IN',
		'bo',
		'bo-IN',
		'br',
		'brx',
		'bs',
		'bs-Cyrl',
		'bs-Latn',
		'ca',
		'ca-AD',
		'ca-ES-valencia',
		'ca-FR',
		'ca-IT',
		'ccp',
		'ccp-IN',
		'ce',
		'ceb',
		'cgg',
		'chr',
		'ckb',
		'ckb-IR',
		'cs',
		'cv',
		'cy',
		'da',
		'da-GL',
		'dav',
		'de',
		'de-AT',
		'de-BE',
		'de-CH',
		'de-IT',
		'de-LI',
		'de-LU',
		'dje',
		'doi',
		'dsb',
		'dua',
		'dyo',
		'dz',
		'ebu',
		'ee',
		'ee-TG',
		'el',
		'el-CY',
		'en',
		'en-001',
		'en-150',
		'en-AE',
		'en-AG',
		'en-AI',
		'en-AS',
		'en-AT',
		'en-AU',
		'en-BB',
		'en-BE',
		'en-BI',
		'en-BM',
		'en-BS',
		'en-BW',
		'en-BZ',
		'en-CA',
		'en-CC',
		'en-CH',
		'en-CK',
		'en-CM',
		'en-CX',
		'en-CY',
		'en-DE',
		'en-DG',
		'en-DK',
		'en-DM',
		'en-ER',
		'en-FI',
		'en-FJ',
		'en-FK',
		'en-FM',
		'en-GB',
		'en-GD',
		'en-GG',
		'en-GH',
		'en-GI',
		'en-GM',
		'en-GU',
		'en-GY',
		'en-HK',
		'en-IE',
		'en-IL',
		'en-IM',
		'en-IN',
		'en-IO',
		'en-JE',
		'en-JM',
		'en-KE',
		'en-KI',
		'en-KN',
		'en-KY',
		'en-LC',
		'en-LR',
		'en-LS',
		'en-MG',
		'en-MH',
		'en-MO',
		'en-MP',
		'en-MS',
		'en-MT',
		'en-MU',
		'en-MV',
		'en-MW',
		'en-MY',
		'en-NA',
		'en-NF',
		'en-NG',
		'en-NL',
		'en-NR',
		'en-NU',
		'en-NZ',
		'en-PG',
		'en-PH',
		'en-PK',
		'en-PN',
		'en-PR',
		'en-PW',
		'en-RW',
		'en-SB',
		'en-SC',
		'en-SD',
		'en-SE',
		'en-SG',
		'en-SH',
		'en-SI',
		'en-SL',
		'en-SS',
		'en-SX',
		'en-SZ',
		'en-TC',
		'en-TK',
		'en-TO',
		'en-TT',
		'en-TV',
		'en-TZ',
		'en-UG',
		'en-UM',
		'en-VC',
		'en-VG',
		'en-VI',
		'en-VU',
		'en-WS',
		'en-ZA',
		'en-ZM',
		'en-ZW',
		'eo',
		'es',
		'es-419',
		'es-AR',
		'es-BO',
		'es-BR',
		'es-BZ',
		'es-CL',
		'es-CO',
		'es-CR',
		'es-CU',
		'es-DO',
		'es-EA',
		'es-EC',
		'es-GQ',
		'es-GT',
		'es-HN',
		'es-IC',
		'es-MX',
		'es-NI',
		'es-PA',
		'es-PE',
		'es-PH',
		'es-PR',
		'es-PY',
		'es-SV',
		'es-US',
		'es-UY',
		'es-VE',
		'et',
		'eu',
		'ewo',
		'fa',
		'fa-AF',
		'ff',
		'ff-Adlm',
		'ff-Adlm-BF',
		'ff-Adlm-CM',
		'ff-Adlm-GH',
		'ff-Adlm-GM',
		'ff-Adlm-GW',
		'ff-Adlm-LR',
		'ff-Adlm-MR',
		'ff-Adlm-NE',
		'ff-Adlm-NG',
		'ff-Adlm-SL',
		'ff-Adlm-SN',
		'ff-Latn',
		'ff-Latn-BF',
		'ff-Latn-CM',
		'ff-Latn-GH',
		'ff-Latn-GM',
		'ff-Latn-GN',
		'ff-Latn-GW',
		'ff-Latn-LR',
		'ff-Latn-MR',
		'ff-Latn-NE',
		'ff-Latn-NG',
		'ff-Latn-SL',
		'fi',
		'fil',
		'fo',
		'fo-DK',
		'fr',
		'fr-BE',
		'fr-BF',
		'fr-BI',
		'fr-BJ',
		'fr-BL',
		'fr-CA',
		'fr-CD',
		'fr-CF',
		'fr-CG',
		'fr-CH',
		'fr-CI',
		'fr-CM',
		'fr-DJ',
		'fr-DZ',
		'fr-GA',
		'fr-GF',
		'fr-GN',
		'fr-GP',
		'fr-GQ',
		'fr-HT',
		'fr-KM',
		'fr-LU',
		'fr-MA',
		'fr-MC',
		'fr-MF',
		'fr-MG',
		'fr-ML',
		'fr-MQ',
		'fr-MR',
		'fr-MU',
		'fr-NC',
		'fr-NE',
		'fr-PF',
		'fr-PM',
		'fr-RE',
		'fr-RW',
		'fr-SC',
		'fr-SN',
		'fr-SY',
		'fr-TD',
		'fr-TG',
		'fr-TN',
		'fr-VU',
		'fr-WF',
		'fr-YT',
		'frr',
		'fur',
		'fy',
		'ga',
		'ga-GB',
		'gd',
		'gl',
		'gsw',
		'gsw-FR',
		'gsw-LI',
		'gu',
		'guz',
		'gv',
		'ha',
		'ha-GH',
		'ha-NE',
		'haw',
		'he',
		'hi',
		'hi-Latn',
		'hr',
		'hr-BA',
		'hsb',
		'hu',
		'hy',
		'ia',
		'id',
		'ig',
		'ii',
		'is',
		'it',
		'it-CH',
		'it-SM',
		'it-VA',
		'ja',
		'jgo',
		'jmc',
		'jv',
		'ka',
		'kab',
		'kam',
		'kde',
		'kea',
		'kgp',
		'khq',
		'ki',
		'kk',
		'kkj',
		'kl',
		'kln',
		'km',
		'kn',
		'ko',
		'ko-KP',
		'kok',
		'ks',
		'ks-Arab',
		'ks-Deva',
		'ksb',
		'ksf',
		'ksh',
		'ku',
		'kw',
		'ky',
		'lag',
		'lb',
		'lg',
		'lkt',
		'ln',
		'ln-AO',
		'ln-CF',
		'ln-CG',
		'lo',
		'lrc',
		'lrc-IQ',
		'lt',
		'lu',
		'luo',
		'luy',
		'lv',
		'mai',
		'mas',
		'mas-TZ',
		'mdf',
		'mer',
		'mfe',
		'mg',
		'mgh',
		'mgo',
		'mi',
		'mk',
		'ml',
		'mn',
		'mni',
		'mni-Beng',
		'mr',
		'ms',
		'ms-BN',
		'ms-ID',
		'ms-SG',
		'mt',
		'mua',
		'my',
		'mzn',
		'naq',
		'nb',
		'nb-SJ',
		'nd',
		'nds',
		'nds-NL',
		'ne',
		'ne-IN',
		'nl',
		'nl-AW',
		'nl-BE',
		'nl-BQ',
		'nl-CW',
		'nl-SR',
		'nl-SX',
		'nmg',
		'nn',
		'nnh',
		'no',
		'nus',
		'nyn',
		'oc',
		'oc-ES',
		'om',
		'om-KE',
		'or',
		'os',
		'os-RU',
		'pa',
		'pa-Arab',
		'pa-Guru',
		'pcm',
		'pis',
		'pl',
		'ps',
		'ps-PK',
		'pt',
		'pt-AO',
		'pt-CH',
		'pt-CV',
		'pt-GQ',
		'pt-GW',
		'pt-LU',
		'pt-MO',
		'pt-MZ',
		'pt-PT',
		'pt-ST',
		'pt-TL',
		'qu',
		'qu-BO',
		'qu-EC',
		'raj',
		'rm',
		'rn',
		'ro',
		'ro-MD',
		'rof',
		'ru',
		'ru-BY',
		'ru-KG',
		'ru-KZ',
		'ru-MD',
		'ru-UA',
		'rw',
		'rwk',
		'sa',
		'sah',
		'saq',
		'sat',
		'sat-Olck',
		'sbp',
		'sc',
		'sd',
		'sd-Arab',
		'sd-Deva',
		'se',
		'se-FI',
		'se-SE',
		'seh',
		'ses',
		'sg',
		'shi',
		'shi-Latn',
		'shi-Tfng',
		'si',
		'sk',
		'sl',
		'smn',
		'sms',
		'sn',
		'so',
		'so-DJ',
		'so-ET',
		'so-KE',
		'sq',
		'sq-MK',
		'sq-XK',
		'sr',
		'sr-Cyrl',
		'sr-Cyrl-BA',
		'sr-Cyrl-ME',
		'sr-Cyrl-XK',
		'sr-Latn',
		'sr-Latn-BA',
		'sr-Latn-ME',
		'sr-Latn-XK',
		'su',
		'su-Latn',
		'sv',
		'sv-AX',
		'sv-FI',
		'sw',
		'sw-CD',
		'sw-KE',
		'sw-UG',
		'ta',
		'ta-LK',
		'ta-MY',
		'ta-SG',
		'te',
		'teo',
		'teo-KE',
		'tg',
		'th',
		'ti',
		'ti-ER',
		'tk',
		'to',
		'tok',
		'tr',
		'tr-CY',
		'tt',
		'twq',
		'tzm',
		'ug',
		'uk',
		'und',
		'ur',
		'ur-IN',
		'uz',
		'uz-Arab',
		'uz-Cyrl',
		'uz-Latn',
		'vai',
		'vai-Latn',
		'vai-Vaii',
		'vi',
		'vun',
		'wae',
		'wo',
		'xh',
		'xog',
		'yav',
		'yi',
		'yo',
		'yo-BJ',
		'yrl',
		'yrl-CO',
		'yrl-VE',
		'yue',
		'yue-Hans',
		'yue-Hant',
		'zgh',
		'zh',
		'zh-Hans',
		'zh-Hans-HK',
		'zh-Hans-MO',
		'zh-Hans-SG',
		'zh-Hant',
		'zh-Hant-HK',
		'zh-Hant-MO',
		'zu'
	]
};

export function getLangPref() {
	if (window) {
		const lS = window.localStorage.getItem('i18n-lang-preference');
		const b = window.navigator.language;
		return lS ?? b;
	} else throw new Error('window is not defined.');
}
export type i18n = ReturnType<typeof i18nTemplate>;

type config = { langs: string[]; defaultLang: string };

export function i18nTemplate(
	config: config,
	page: Readable<Page<Record<string, string>, string | null>>
) {
	return derived(page, ($page) => {
		const lang = $page.params.lang || config.defaultLang;
		const route = $page.route.id || '';
		return {
			get: function (id: string, pathDel = '_') {
				const layout = id.includes('_layout.') || id.startsWith('layout.');
				const result = get($page.data.contents, layout ? id : 'page.' + id);
				if (!result) {
					if (layout) {
						const filePath = `.../contents/${lang}/${id.split('.')[0].replace(pathDel, '/')}`;
						const key = id.split('.').slice(1).join('.');
						console.error(
							`couldn't get content for '${id}'.\n\nDoes the path '${filePath}' point to an existing file?\n\nDoes the key '${key}' exist in the file '${filePath}'?`
						);
					} else {
						const filePath = `.../contents${route.replace('[[lang=lang]]', lang)}/page`;
						const key = id;
						console.error(
							`couldn't get content for '${id}'.\n\nDoes the path '${filePath}' point to an existing file?\n\nDoes the key '${key}' exist in the file '${filePath}'?`
						);
					}
				}
				return result;
			},
			lang: lang,
			redirect: async function () {
				if (window) {
					const { goto } = await import('$app/navigation');
					const langPref = getLangPref();
					const nextBestLang =
						config.langs.find((l: string) => langPref.includes(l) || l.includes(langPref)) ??
						config.defaultLang;
					const possibleLocales = availableLocales.full;
					// finds the first matching locale
					const foundLocale = possibleLocales.find(
						(l) =>
							window.location.pathname.startsWith(`/${l}/`) || window.location.pathname === `/${l}`
					);
					let newPathname = window.location.pathname;
					if (foundLocale) {
						if (nextBestLang !== config.defaultLang) {
							newPathname = newPathname.replace('/' + foundLocale, '/' + nextBestLang);
						} else {
							newPathname = newPathname.replace('/' + foundLocale, '');
						}
					} else if (nextBestLang !== config.defaultLang) {
						newPathname = '/' + nextBestLang + newPathname;
					}

					const newUrl = newPathname + window.location.search + window.location.hash;
					if (lang !== nextBestLang) {
						goto(newUrl);
					}
				}
			}
		};
	});
}

export function initTemplate(config: config) {
	async function init({
		lang,
		pathname,
		pathDel = '_',
		layout = true,
		page
	}: {
		lang: string | undefined;
		pathname: string;
		pathDel?: string;
		layout?: boolean;
		page?: boolean;
	}) {
		function stripEnd(s: string) {
			return s.split('/').slice(0, -1).join('/');
		}
		function stripBegin(s: string, del: string) {
			return s.split(del).slice(1).join(del);
		}
		const strippedLangPath = pathname.replace(`/${lang}`, '') + '/page';
		const strippedPath = stripEnd(strippedLangPath);
		const l = lang || config.defaultLang;
		const pageKey = (l + strippedLangPath).replace('//', '/').replaceAll('/', pathDel);
		const contents: Record<string, unknown> = {};
		try {
			const allContents: Record<string, unknown> = await import('virtual:merge/contents/**/*.mdx');
			const pageContents = allContents[pageKey];
			if (layout) {
				Object.entries(allContents)
					.filter(
						(e) =>
							e[0].startsWith(l + pathDel) &&
							e[0].endsWith(pathDel + 'layout') &&
							strippedPath.includes(stripEnd(e[0]))
					)
					.forEach((e) => {
						contents[stripBegin(e[0], pathDel)] = e[1];
					});
			}
			if (page || page === undefined) {
				contents.page = pageContents;
			}
		} catch (error) {
			console.error("Couldn't import content .mdx files, error:");
			console.error(error);
		}
		return contents;
	}
	return init;
}

export function setLangPref(lang: string) {
	if (window) {
		window.localStorage.setItem('i18n-lang-preference', lang);
	} else throw new Error('window is not defined.');
}

export function matchTemplate(config: config) {
	return ((param) => {
		const locales = config.langs;
		return locales.includes(param);
	}) satisfies ParamMatcher;
}
